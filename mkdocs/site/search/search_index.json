{
    "docs": [
        {
            "location": "/",
            "text": "Documentation du Projet 21\n\n\nDescription g\u00e9n\u00e9rale du Projet\n\n\nAu cours de notre vie quotidienne, nous percevons et identifions \u00e0 longueur de journ\u00e9e les visages des personnes que nous rencontrons. Ainsi lorsque nous rencontrons une personne, notre cerveau va chercher dans notre m\u00e9moire et v\u00e9rifier si cette personne est r\u00e9pertori\u00e9e ou non. La perception visuelle humaine fait intervenir donc tout un m\u00e9canisme bas\u00e9, entre autres, sur l\u2019apprentissage qui lui permet de comprendre ce qui est observ\u00e9. Ainsi, d\u00e9tecter ou reconna\u00eetre des personnes para\u00eet \u00e9vident pour l\u2019Homme. Cependant, il s\u2019av\u00e8re que ce sont des t\u00e2ches tr\u00e8s difficiles \u00e0 automatiser pour un ordinateur. La difficult\u00e9 r\u00e9side dans le fait que les images prises varient \u00e9norm\u00e9ment suivant les param\u00e8tres d\u2019acquisition tels que l\u2019arri\u00e8re plan, la direction et l\u2019intensit\u00e9 des sources lumineuses, l\u2019angle de la prise de vue, la distance de la cam\u00e9ra au sujet. Plusieurs m\u00e9thodes ont \u00e9t\u00e9 d\u00e9velopp\u00e9es pour la reconnaissance de visage. N\u00e9anmoins, elles pr\u00e9sentent un certain nombre de limitations li\u00e9es \u00e0 l'orientation du visage ou \u00e0 la pose, \u00e0 l\u2019\u00e9clairage, \u00e0 l\u2019expression faciale, aux occultations, etc.\n\n\nStructure de cette documentation\n\n\nLa documentation est divis\u00e9e en 3 parties la premi\u00e8re est une pr\u00e9sentation g\u00e9n\u00e9rale de chaque m\u00e9thode, ensuite une description du processus d'installation et d'utilisation. La seconde partie aborde l'utilisation et l'impl\u00e9mentation des protocoles de tests utilis\u00e9s. La derni\u00e8re partie est un guide d'utilisation du code fournis (tutorials).\n\n\nPr\u00e9sentation de chaque m\u00e9thode\n\n\n\n\nFace recognition\n\n\nOpen Face\n\n\nOpen Br\n\n\n\n\nProtocoles de tests\n\n\n\n\nD\u00e9tection\n\n\nReconnaissance\n\n\n\n\nTutoriels et documentation du code\n\n\n\n\nTutoriels\n\n\nDocumentation \nFace recognition\n\n\nDocumentation \nOpen Face\n\n\nDocumentation  \nOpen Br\n\n\n\n\n\n\nPROJECT 21 is licensed under the \nGNU General Public License v3.0\n\nPermissions of this strong copyleft license are conditioned on making available complete source code of licensed works and modifications, which include larger works using a licensed work, under the same license. Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.",
            "title": "Home"
        },
        {
            "location": "/#documentation-du-projet-21",
            "text": "",
            "title": "Documentation du Projet 21"
        },
        {
            "location": "/#description-generale-du-projet",
            "text": "Au cours de notre vie quotidienne, nous percevons et identifions \u00e0 longueur de journ\u00e9e les visages des personnes que nous rencontrons. Ainsi lorsque nous rencontrons une personne, notre cerveau va chercher dans notre m\u00e9moire et v\u00e9rifier si cette personne est r\u00e9pertori\u00e9e ou non. La perception visuelle humaine fait intervenir donc tout un m\u00e9canisme bas\u00e9, entre autres, sur l\u2019apprentissage qui lui permet de comprendre ce qui est observ\u00e9. Ainsi, d\u00e9tecter ou reconna\u00eetre des personnes para\u00eet \u00e9vident pour l\u2019Homme. Cependant, il s\u2019av\u00e8re que ce sont des t\u00e2ches tr\u00e8s difficiles \u00e0 automatiser pour un ordinateur. La difficult\u00e9 r\u00e9side dans le fait que les images prises varient \u00e9norm\u00e9ment suivant les param\u00e8tres d\u2019acquisition tels que l\u2019arri\u00e8re plan, la direction et l\u2019intensit\u00e9 des sources lumineuses, l\u2019angle de la prise de vue, la distance de la cam\u00e9ra au sujet. Plusieurs m\u00e9thodes ont \u00e9t\u00e9 d\u00e9velopp\u00e9es pour la reconnaissance de visage. N\u00e9anmoins, elles pr\u00e9sentent un certain nombre de limitations li\u00e9es \u00e0 l'orientation du visage ou \u00e0 la pose, \u00e0 l\u2019\u00e9clairage, \u00e0 l\u2019expression faciale, aux occultations, etc.",
            "title": "Description g\u00e9n\u00e9rale du Projet"
        },
        {
            "location": "/#structure-de-cette-documentation",
            "text": "La documentation est divis\u00e9e en 3 parties la premi\u00e8re est une pr\u00e9sentation g\u00e9n\u00e9rale de chaque m\u00e9thode, ensuite une description du processus d'installation et d'utilisation. La seconde partie aborde l'utilisation et l'impl\u00e9mentation des protocoles de tests utilis\u00e9s. La derni\u00e8re partie est un guide d'utilisation du code fournis (tutorials).",
            "title": "Structure de cette documentation"
        },
        {
            "location": "/#presentation-de-chaque-methode",
            "text": "Face recognition  Open Face  Open Br",
            "title": "Pr\u00e9sentation de chaque m\u00e9thode"
        },
        {
            "location": "/#protocoles-de-tests",
            "text": "D\u00e9tection  Reconnaissance",
            "title": "Protocoles de tests"
        },
        {
            "location": "/#tutoriels-et-documentation-du-code",
            "text": "Tutoriels  Documentation  Face recognition  Documentation  Open Face  Documentation   Open Br    PROJECT 21 is licensed under the  GNU General Public License v3.0 \nPermissions of this strong copyleft license are conditioned on making available complete source code of licensed works and modifications, which include larger works using a licensed work, under the same license. Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.",
            "title": "Tutoriels et documentation du code"
        },
        {
            "location": "/facerecognition/",
            "text": "Face Recognition\n\n\nFace recognition\n est une m\u00e9thode utilisant le Deep Learning qui pr\u00e9sente une bonne solution pour la r\u00e9solution du probl\u00e8me de la reconnaissance de personne. Cette m\u00e9thode commence d\u2019abord par d\u00e9tecter tous les visages pr\u00e9sents dans l\u2019image fournie en entr\u00e9e. Ensuite, sur chaque visage applique les op\u00e9rations n\u00e9cessaires sur chaque visage tel que la rotation afin d\u2019obtenir une vue de profil. La prochaine \u00e9tape consiste \u00e0 transformer cette image en 128 caract\u00e9ristiques qui sont propres \u00e0 la personne de fa\u00e7on quand une m\u00eame personne est pr\u00e9sente sur 2 images diff\u00e9rentes aura les m\u00eames ou de tr\u00e8s proche ensemble de caract\u00e9ristiques. La derni\u00e8re \u00e9tape consiste \u00e0 comparer ces donn\u00e9es-ci aux donn\u00e9es d\u00e9j\u00e0 existant dans la base d\u2019apprentissage afin identifier et de d\u00e9terminer le nom de la personne.\n\n\nConstruit en utilisant \ndlib\n Face recognition est \u00e0 la fine pointe de la technologie\nconstruit avec un apprentissage profond. Le mod\u00e8le a une pr\u00e9cision de 99,38% sur le\n\nLabeled Faces in the Wild\n.\n\n\nInstallation\n\n\nExigences\n\n\n\n\nPython 3.3+ ou Python 2.7\n\n\nmacOS ou Linux (Windows n'est pas officiellement support\u00e9, mais pourrait fonctionner)\n\n\n\n\nOptions d'installation:\n\n\nInstallation sur Mac ou Linux\n\n\nTout d'abord, assurez-vous que dlib est d\u00e9j\u00e0 install\u00e9 avec les d\u00e9pendances Python:\n\n\npip3 installer dlib\n\n\n\n\nAfin d'installer correctement dlib, vous devrez peut-\u00eatre installer \ncmake\n\n\nEnsuite, installez ce module \u00e0 partir de pypi en utilisant \npip3\n (ou\npip2\n pour Python 2):\n\n\npip3 installer face_recognition\n\n\n\n\nSi vous rencontrez des probl\u00e8mes avec l'installation, vous pouvez \u00e9galement essayer\n\nVM pr\u00e9configur\u00e9e\n.\n\n\nInstallation sur Raspberry Pi 2+\n\n\n\n\nInstructions d'installation de Raspberry Pi 2+\n\n\n\n\nInstallation sous Windows\n\n\nBien que Windows ne soit pas officiellement pris en charge, il existe des m\u00e9thodes pour le faire\n\n\n\n\nGuide d'installation de Windows 10 de @ masoudr \ndlib + face_recognition\n.\n\n\n\n\nInstallation d'une image de machine virtuelle pr\u00e9configur\u00e9e\n\n\n\n\nT\u00e9l\u00e9charger l'image VM pr\u00e9configur\u00e9e\n (pour VMware Player ou VirtualBox).\n\n\n\n\nUtilisation\n\n\nL'entrainement du classificateur KNN\n\n\nAfin de pouvoir reconna\u00eetre les visages, nous devons cr\u00e9er un classificateur et le sauvegarder \u00e0 l'avance.\n\n\nCr\u00e9er un dossier d'ensemble d'apprentissage\n\n\nStructure:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<train_dir> /\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u251c\u2500\u2500 <personne1> /\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Som \u251c\u2500\u2500 <nom de famille> .jpeg\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502 \u251c\u2500\u2500 <nomdufichier2> .jpeg\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502 \u251c\u2500\u2500 ...\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u251c\u2500\u2500 <personne2> /\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Som \u251c\u2500\u2500 <nom de famille> .jpeg\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502 \u2514\u2500\u2500 <nomdufichier2> .jpeg\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2514\u2500\u2500 ...\n\n\n\n\nEntrainer et enregistrer un classificateur KNN\n\n\nknn_train.py --training-path --clf-saving-path\n\n\n\n\nO\u00f9 \ntraining-path\nest le dossier contenant les images d'apprentissage et\nclf-saving-path\n est le fichier classificateur (au format \n.clf\n).\n\n\nIdentifier les visages en utilisant le classificateur cr\u00e9\u00e9\n\n\nComme le classificateur KNN est bien entrain\u00e9 et enregistr\u00e9, nous n'avons plus besoin de d'entrainer le classificateur chaque fois que nous utilisons le mod\u00e8le. \nCependant si on change de mod\u00e8le on devra refaire l'entrainement, ie si on veut ajouter de nouvelles personnes dans la base d'apprentissage.\n\n\nknn.py --clf-load-path --testing-path\n\n\n\n\nO\u00f9 clf-load-path est le fichier du classificateur et testing-path est le chemin de toute l'image de test.\n\n\nUne fois la reconnaissance termin\u00e9e, un fichier \nresult.txt\n sera cr\u00e9\u00e9, dans lequel la premi\u00e8re colonne est le nom reconnu et la deuxi\u00e8me colonne le nom r\u00e9el du fichier.",
            "title": "Face Recognition"
        },
        {
            "location": "/facerecognition/#face-recognition",
            "text": "Face recognition  est une m\u00e9thode utilisant le Deep Learning qui pr\u00e9sente une bonne solution pour la r\u00e9solution du probl\u00e8me de la reconnaissance de personne. Cette m\u00e9thode commence d\u2019abord par d\u00e9tecter tous les visages pr\u00e9sents dans l\u2019image fournie en entr\u00e9e. Ensuite, sur chaque visage applique les op\u00e9rations n\u00e9cessaires sur chaque visage tel que la rotation afin d\u2019obtenir une vue de profil. La prochaine \u00e9tape consiste \u00e0 transformer cette image en 128 caract\u00e9ristiques qui sont propres \u00e0 la personne de fa\u00e7on quand une m\u00eame personne est pr\u00e9sente sur 2 images diff\u00e9rentes aura les m\u00eames ou de tr\u00e8s proche ensemble de caract\u00e9ristiques. La derni\u00e8re \u00e9tape consiste \u00e0 comparer ces donn\u00e9es-ci aux donn\u00e9es d\u00e9j\u00e0 existant dans la base d\u2019apprentissage afin identifier et de d\u00e9terminer le nom de la personne.  Construit en utilisant  dlib  Face recognition est \u00e0 la fine pointe de la technologie\nconstruit avec un apprentissage profond. Le mod\u00e8le a une pr\u00e9cision de 99,38% sur le Labeled Faces in the Wild .",
            "title": "Face Recognition"
        },
        {
            "location": "/facerecognition/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/facerecognition/#exigences",
            "text": "Python 3.3+ ou Python 2.7  macOS ou Linux (Windows n'est pas officiellement support\u00e9, mais pourrait fonctionner)",
            "title": "Exigences"
        },
        {
            "location": "/facerecognition/#options-dinstallation",
            "text": "",
            "title": "Options d'installation:"
        },
        {
            "location": "/facerecognition/#installation-sur-mac-ou-linux",
            "text": "Tout d'abord, assurez-vous que dlib est d\u00e9j\u00e0 install\u00e9 avec les d\u00e9pendances Python:  pip3 installer dlib  Afin d'installer correctement dlib, vous devrez peut-\u00eatre installer  cmake  Ensuite, installez ce module \u00e0 partir de pypi en utilisant  pip3  (ou pip2  pour Python 2):  pip3 installer face_recognition  Si vous rencontrez des probl\u00e8mes avec l'installation, vous pouvez \u00e9galement essayer VM pr\u00e9configur\u00e9e .",
            "title": "Installation sur Mac ou Linux"
        },
        {
            "location": "/facerecognition/#installation-sur-raspberry-pi-2",
            "text": "Instructions d'installation de Raspberry Pi 2+",
            "title": "Installation sur Raspberry Pi 2+"
        },
        {
            "location": "/facerecognition/#installation-sous-windows",
            "text": "Bien que Windows ne soit pas officiellement pris en charge, il existe des m\u00e9thodes pour le faire   Guide d'installation de Windows 10 de @ masoudr  dlib + face_recognition .",
            "title": "Installation sous Windows"
        },
        {
            "location": "/facerecognition/#installation-dune-image-de-machine-virtuelle-preconfiguree",
            "text": "T\u00e9l\u00e9charger l'image VM pr\u00e9configur\u00e9e  (pour VMware Player ou VirtualBox).",
            "title": "Installation d'une image de machine virtuelle pr\u00e9configur\u00e9e"
        },
        {
            "location": "/facerecognition/#utilisation",
            "text": "",
            "title": "Utilisation"
        },
        {
            "location": "/facerecognition/#lentrainement-du-classificateur-knn",
            "text": "Afin de pouvoir reconna\u00eetre les visages, nous devons cr\u00e9er un classificateur et le sauvegarder \u00e0 l'avance.",
            "title": "L'entrainement du classificateur KNN"
        },
        {
            "location": "/facerecognition/#creer-un-dossier-densemble-dapprentissage",
            "text": "Structure:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<train_dir> /\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u251c\u2500\u2500 <personne1> /\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Som \u251c\u2500\u2500 <nom de famille> .jpeg\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502 \u251c\u2500\u2500 <nomdufichier2> .jpeg\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502 \u251c\u2500\u2500 ...\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u251c\u2500\u2500 <personne2> /\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Som \u251c\u2500\u2500 <nom de famille> .jpeg\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502 \u2514\u2500\u2500 <nomdufichier2> .jpeg\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2514\u2500\u2500 ...",
            "title": "Cr\u00e9er un dossier d'ensemble d'apprentissage"
        },
        {
            "location": "/facerecognition/#entrainer-et-enregistrer-un-classificateur-knn",
            "text": "knn_train.py --training-path --clf-saving-path  O\u00f9  training-path est le dossier contenant les images d'apprentissage et clf-saving-path  est le fichier classificateur (au format  .clf ).",
            "title": "Entrainer et enregistrer un classificateur KNN"
        },
        {
            "location": "/facerecognition/#identifier-les-visages-en-utilisant-le-classificateur-cree",
            "text": "Comme le classificateur KNN est bien entrain\u00e9 et enregistr\u00e9, nous n'avons plus besoin de d'entrainer le classificateur chaque fois que nous utilisons le mod\u00e8le. \nCependant si on change de mod\u00e8le on devra refaire l'entrainement, ie si on veut ajouter de nouvelles personnes dans la base d'apprentissage.  knn.py --clf-load-path --testing-path  O\u00f9 clf-load-path est le fichier du classificateur et testing-path est le chemin de toute l'image de test.  Une fois la reconnaissance termin\u00e9e, un fichier  result.txt  sera cr\u00e9\u00e9, dans lequel la premi\u00e8re colonne est le nom reconnu et la deuxi\u00e8me colonne le nom r\u00e9el du fichier.",
            "title": "Identifier les visages en utilisant le classificateur cr\u00e9\u00e9"
        },
        {
            "location": "/openbr/",
            "text": "Open Br\n\n\nOpenBr est un projet open-source qui vise \u00e0 am\u00e9liorer les algorithmes existants, de s'interfacer avec des syst\u00e8mes commerciaux, de mesurer les performances de reconnaissance et de d\u00e9ployer des syst\u00e8mes biom\u00e9triques automatis\u00e9s. Le projet est con\u00e7u pour faciliter le prototypage rapide d'algorithmes, et dispose d'un cadre de base mature, d'un syst\u00e8me de plug-in flexible et d'un support pour le d\u00e9veloppement de sources ouvertes et ferm\u00e9es. Des algorithmes pr\u00eats \u00e0 l'emploi sont \u00e9galement disponibles pour des modalit\u00e9s sp\u00e9cifiques, notamment la reconnaissance faciale, l\u2019estimation de l'\u00e2ge et l'estimation du genre. Les cr\u00e9ateurs sont J. Klontz, B. Klare, S. Klum, M. Burge, A. Jain.\n\n\ninstallation\n\n\nOpenBR est pris en charge sur plusieurs syst\u00e8mes d'exploitation.\nNotamment:\n\n\n\n\nLinux\n\n\nMac Os X\n\n\nWindows\n\n\n\n\nCepedant nous avons pr\u00e9par\u00e9 une \nmachine virtuelle linux\n d\u00e9j\u00e0 pr\u00eate \u00e0 l'emploi. \nDisponible ici\n.\n\n\nInstallation Linux\n\n\n\n\n\n\nInstaller GCC 4.9.2\n\n\n$ sudo apt-get update\n$ sudo apt-get install build-essential\n\n\n\n\n\n\n\nInstaller CMake 3.0.2\n\n\n$ sudo apt-get install cmake cmake-curses-gui\n\n\n\n\n\n\n\nT\u00e9l\u00e9charger OpenCV 2.4.11\n, \nAussi\n \nFaire un build OpenCV avec support vid\u00e9o\n\n\n$ cd ~/Downloads\n$ unzip opencv-2.4.11.zip\n$ cd opencv-2.4.11\n$ mkdir build\n$ cd build\n$ cmake -DCMAKE_BUILD_TYPE=Release ..\n$ make -j4\n$ sudo make install\n$ cd ../..\n$ rm -rf opencv-2.4.11*\n\n\n\n\n\n\n\nInstaller Qt 5.4.1\n\n\n$ sudo apt-get install qt5-default libqt5svg5-dev qtcreator\n\n\n\n\n\n\n\nAvec un compte \nGitHub\n \n\n\n$ git clone https://github.com/biometrics/openbr.git\n$ cd openbr\n$ git checkout v1.1.0\n$ git submodule init\n$ git submodule update\n\n\n\n\n\n\n\nBuild OpenBR!\n\n\n$ mkdir build # from the OpenBR root directory\n$ cd build\n$ cmake -DCMAKE_BUILD_TYPE=Release ..\n$ make -j4\n$ sudo make install\n\n\n\n\n\n\n\nHack OpenBR!\n\n\n\n\n\n\nOpen Qt Creator IDE\n\n\n$ qtcreator &\n\n\n\n\n\n\nFrom the Qt Creator \"File\" menu select \"Open File or Project...\".\n\n\n\n\nSelect \"openbr/CMakeLists.txt\" then \"Open\".\n\n\nBrowse to your pre-existing build directory \"openbr/build\" then select \"Next\".\n\n\nSelect \"Run CMake\" then \"Finish\".\n\n\nYou're all set! You can find more information on Qt Creator \nhere\n if you need it.\n\n\n\n\n\n\n\n\n(Optionel) Tester OpenBR (un peu lourd)!\n\n\n$ cd openbr/scripts\n$ ./downloadDatasets.sh\n$ cd ../build\n$ make test\n\n\n\n\n\n\n\n(Optionel) Package OpenBR!\n\n\n$ cd openbr/build\n$ sudo cpack -G TGZ\n\n\n\n\n\n\n\n(Optionel) Build OpenBR documentation!\n\n\n\n\n\n\nG\u00e9n\u00e9rer la documentation\n\n\n$ pip install mkdocs\n$ cd openbr/docs\n$ sh build_docs.sh\n$ mkdocs serve\n\n\n\n\n\n\n\nTaper \nhttp://127.0.0.1:8000\n dans votre ordinateur pour voir la docs.\n\n\n\n\n\n\n\n\n\n\n\n\nOSX\n\n\n1.T\u00e9l\u00e9chargez et installez les derniers outils \u00abXCode\u00bb et \u00abCommand Line Tools\u00bb sur [la page T\u00e9l\u00e9chargements de d\u00e9veloppeurs Apple].(https://developer.apple.com/downloads/index.action#) page.\n\n\n\n\n\n\nT\u00e9l\u00e9charger CMake 3.0.2\n\n\n    $ cd ~/Downloads\n    $ tar -xf cmake-3.0.2.tar.gz\n    $ cd cmake-3.0.2\n    $ ./configure\n    $ make -j4\n    $ sudo make install\n    $ cd ..\n    $ rm -rf cmake-3.0.2*\n\n\n\n\n\n\n\nT\u00e9l\u00e9charger OpenCV 2.4.11\n\n\n$ cd ~/Downloads\n$ unzip opencv-2.4.11.zip\n$ cd opencv-2.4.11\n$ mkdir build\n$ cd build\n$ cmake -DCMAKE_BUILD_TYPE=Release ..\n$ make -j4\n$ sudo make install\n$ cd ../..\n$ rm -rf opencv-2.4.11*\n\n\n\n\n\n\n\nT\u00e9l\u00e9charger et installler Qt 5.4.1\n\n\n\n\n\n\nAvec un compte \nGitHub\n\n\n$ git clone https://github.com/biometrics/openbr.git\n$ cd openbr\n$ git checkout v1.1.0\n$ git submodule init\n$ git submodule update\n\n\n\n\n\n\n\nBuild OpenBR!\n\n\n$ mkdir build # from the OpenBR root directory\n$ cd build\n$ cmake -DCMAKE_PREFIX_PATH=~/Qt/5.4.1/clang_64 -DCMAKE_BUILD_TYPE=Release ..\n$ make -j4\n$ sudo make install\n\n\n\n\n\n\n\nHack OpenBR!\n\n\n\n\n\n\nOpen Qt Creator IDE\n\n\n$ open ~/Qt/Qt\\ Creator.app\n\n\n\n\n\n\n\nFrom the Qt Creator \"File\" menu select \"Open File or Project...\".\n\n\n\n\nSelect \"openbr/CMakeLists.txt\" then \"Open\".\n\n\nBrowse to your pre-existing build directory \"openbr/build\" then select \"Continue\".\n\n\nSelect \"Run CMake\" then \"Done\".\n\n\nYou're all set! You can find more information on Qt Creator \nhere\n if you need it.\n\n\n\n\n\n\n\n\n(Optionel) Tester OpenBR (un peu lourd)!\n\n\n$ cd openbr/scripts\n$ ./downloadDatasets.sh\n$ cd ../build\n$ make test\n\n\n\n\n\n\n\n(Optional) Package OpenBR!\n\n\n$ cd openbr/build\n$ sudo cpack -G TGZ\n\n\n\n\n\n\n\n(Optional) Build OpenBR documentation!\n\n\n\n\n\n\nG\u00e9n\u00e9rer la doc\n\n\n$ pip install mkdocs\n$ cd openbr/docs\n$ sh build_docs.sh\n$ mkdocs serve\n\n\n\n\n\n\n\nTaper \nhttp://127.0.0.1:8000\n dans votre ordinateur pour voir la docs.\n\n\n\n\n\n\n\n\n\n\n\n\nWindows\n\n\n\n\n\n\nT\u00e9l\u00e9chargez Visual Studio Express 2013 pour Windows Desktop\n et installez-le. Vous devrez vous enregistrer aupr\u00e8s de Microsoft, mais c'est gratuit.e.\n\n\n\n\n\n\nT\u00e9l\u00e9charger et installer CMake 3.0.2\n\n\u00a0\u00a0\u00a0\u00a0 1. Pendant la configuration de l'installation, s\u00e9lectionnez \"Ajouter CMake \u00e0 PATH\".\n\n\n\n\n\n\nT\u00e9l\u00e9charger OpenCV 2.4.11\n\n\u00a0\u00a0\u00a0\u00a0 1. Consid\u00e9rez le programme open source gratuit \n7-Zip\n si vous avez besoin d'un programme pour d\u00e9sarchiver les archives.\n\u00a0\u00a0\u00a0\u00a0 2. D\u00e9placez le dossier \"opencv-2.4.11\" sur \"C: \\\".\n\n\n\n\nOuvrir  \"l'invite de commande VS2013 x64 Cross Tools \"  (dans le menu D\u00e9marrer, s\u00e9lectionnez \u00abTous les programmes\u00bb -> \u00abMicrosoft Visual Studio 2013\u00bb -> \u00abOutils Visual Studio\u00bb -> \u00abInvite de commandes VS2013 x64 Cross Tools\u00bb) :\n        $ cd C:\\opencv-2.4.11\n        $ mkdir build-msvc2013\n        $ cd build-msvc2013\n        $ cmake -G \"NMake Makefiles\" -DBUILD_PERF_TESTS=OFF -DBUILD_TESTS=OFF -DWITH_CUDA=OFF -DWITH_FFMPEG=OFF -DCMAKE_BUILD_TYPE=Debug ..\n        $ nmake\n        $ nmake install\n        $ cmake -DCMAKE_BUILD_TYPE=Release ..\n        $ nmake\n        $ nmake install\n        $ nmake clean\n\n\n\n\n\n\n\n\nT\u00e9l\u00e9charger et Installer Qt 5.4.1\n\n\n\n\n\n\nAvec un compte \nGitHub\n \n\n\n    $ cd /c\n    $ git clone https://github.com/biometrics/openbr.git\n    $ cd openbr\n    $ git checkout v1.1.0\n    $ git submodule init\n    $ git submodule update\n\n\n\n\n\n\n\nBuild OpenBR!\n\n\n\n\nFrom the VS2013 x64 Cross Tools Command Prompt:\n$ cd C:\\openbr\n$ mkdir build-msvc2013\n$ cd build-msvc2013\n$ cmake -G \"CodeBlocks - NMake Makefiles\" -DCMAKE_PREFIX_PATH=\"C:/opencv-2.4.11/build/install;C:/Qt/Qt5.4.1/5.4/msvc2013_64\" -DCMAKE_INSTALL_PREFIX=\"./install\" -DBR_INSTALL_DEPENDENCIES=ON -DCMAKE_BUILD_TYPE=Release ..\n$ nmake\n$ nmake install\n\n\n\n\n\n\n\n\n\n\n\nD\u00e9couvrez le dossier \"install\".\n\n\n\n\n\n\nHack OpenBR!\n\n\n\n\nFrom the VS2013 x64 Cross Tools Command Prompt:\n    $ C:\\Qt\\Qt5.4.1\\Tools\\QtCreator\\bin\\qtcreator.exe\n\n\nFrom the Qt Creator \"Tools\" menu select \"Options...\"\n\n\nUnder \"Kits\" select \"Desktop (default)\"\n\n\nFor \"Compiler:\" select \"Microsoft Visual C++ Compiler 11.0 (x86_amd64)\" and click \"OK\"\n\n\nFrom the Qt Creator \"File\" menu select \"Open File or Project...\".\n\n\nSelect \"C:\\openbr\\CMakeLists.txt\" then \"Open\".\n\n\nIf prompted for the location of CMake, enter \"C:\\Program Files (x86)\\CMake 3.0.2\\bin\\cmake.exe\".\n\n\nBrowse to your pre-existing build directory \"C:\\openbr\\build-msvc2013\" then select \"Next\".\n\n\nSelect \"Run CMake\" then \"Finish\".\n\n\nYou're all set! You can find more information on Qt Creator \nhere\n if you need.\n\n\n\n\n\n\n\n\n(Optional) Package OpenBR!\n\n\n\n\nFrom the VS2013 x64 Cross Tools Command Prompt:\n    $ cd C:\\openbr\\build-msvc2013\n    $ cpack -G ZIP\n\n\n\n\n\n\n\n\n\n\nFace Recognition\n\n\nCe tutoriel donne un exemple sur la fa\u00e7on d'effectuer une reconnaissance de visage dans OpenBR. OpenBR impl\u00e9mente l'algorithme 4SF \n^2\n pour effectuer la reconnaissance faciale. Veuillez lire le \"paper\" pour plus de d\u00e9tails sur l'algorithme. \n\n\nPour commencer, On peut faire la reconnaissance faciale \u00e0 partir de l'invite de commande. Ouvrez le terminal et entrez:\n\n\n$ br -algorithm FaceRecognition \\\n    -compare ../data/MEDS/img/S354-01-t10_01.jpg ../data/MEDS/img/S354-02-t10_01.jpg \\\n     -compare ../data/MEDS/img/S354-01-t10_01.jpg ../data/MEDS/img/S386-04-t10_01.jpg\n\n\n\nAssez facile? Vous devriez voir les r\u00e9sultats sur le terminal qui ressemblent \u00e0 :\n\n\n$ Set algorithm to FaceRecognition\n$ Loading /usr/local/share/openbr/models/algorithms/FaceRecognition\n$ Loading /usr/local/share/openbr/models/transforms//FaceRecognitionExtraction\n$ Loading /usr/local/share/openbr/models/transforms//FaceRecognitionEmbedding\n$ Loading /usr/local/share/openbr/models/transforms//FaceRecognitionQuantization\n$ Comparing ../data/MEDS/img/S354-01-t10_01.jpg and ../data/MEDS/img/S354-02-t10_01.jpg\n$ Enrolling ../data/MEDS/img/S354-01-t10_01.jpg to S354-01-t10_01r7Rv4W.mem\n$ 100.00%  ELAPSED=00:00:00  REMAINING=00:00:00  COUNT=1\n$ 100.00%  ELAPSED=00:00:00  REMAINING=00:00:00  COUNT=1\n$ 1.8812\n$ Comparing ../data/MEDS/img/S354-01-t10_01.jpg and ../data/MEDS/img/S386-04-t10_01.jpg\n$ Enrolling ../data/MEDS/img/S354-01-t10_01.jpg to S354-01-t10_01r7Rv4W.mem\n$ 100.00%  ELAPSED=00:00:00  REMAINING=00:00:00  COUNT=1\n$ 100.00%  ELAPSED=00:00:00  REMAINING=00:00:00  COUNT=1\n$ 0.571219\n\n\n\nAlors, qu'est-ce que \nFaceRecognition\n? C'est une abbrieviation pour simplifier l'ex\u00e9cution de l'algorithme. Toutes les abr\u00e9viations d'algorithmes se trouvent dans \nopenbr / plugins / core / algorithms.cpp\n.\n\n\nIl est \u00e9galement possible:\n\n\n\n\n\u00c9valuer les performances de reconnaissance de faciale (Notez que cela n\u00e9cessite \nR\n):\n\n\n\n\n        $ br -algorithm FaceRecognition -path ../data/MEDS/img/ \\\n        -enroll ../data/MEDS/sigset/MEDS_frontal_target.xml target.gal \\\n        -enroll ../data/MEDS/sigset/MEDS_frontal_query.xml query.gal \\\n        -compare target.gal query.gal scores.mtx \\\n        -makeMask ../data/MEDS/sigset/MEDS_frontal_target.xml ../data/MEDS/sigset/MEDS_frontal_query.xml MEDS.mask \\\n        -eval scores.mtx MEDS.mask Algorithm_Dataset/FaceRecognition_MEDS.csv \\\n        -plot Algorithm_Dataset/FaceRecognition_MEDS.csv MEDS\n\n\n\n\n\n\n\n\nEffectuez une recherche de reconnaissance faciale 1:N.\n\n\n$ br -algorithm FaceRecognition -enrollAll -enroll ../data/MEDS/img 'meds.gal'\n$ br -algorithm FaceRecognition -compare meds.gal ../data/MEDS/img/S001-01-t10_01.jpg match_scores.csv\n\n\n\n\n\n\n\nEntrainer un nouvel algorithme de reconnaissance faciale (sur une autre base):\n\n\n$ br -algorithm 'Open+Cvt(Gray)+Cascade(FrontalFace)+ASEFEyes+Affine(128,128,0.33,0.45)+(Grid(10,10)+SIFTDescriptor(12)+ByRow)/(Blur(1.1)+Gamma(0.2)+DoG(1,2)+ContrastEq(0.1,10)+LBP(1,2)+RectRegions(8,8,6,6)+Hist(59))+PCA(0.95)+Normalize(L2)+Dup(12)+RndSubspace(0.05,1)+LDA(0.98)+Cat+PCA(0.95)+Normalize(L1)+Quantize:NegativeLogPlusOne(ByteL1)' -train ../data/ATT/img FaceRecognitionATT\n\n\n\n\n\n\n\nL'API de ligne de commande est document\u00e9e \nici\n.",
            "title": "Open Br"
        },
        {
            "location": "/openbr/#open-br",
            "text": "OpenBr est un projet open-source qui vise \u00e0 am\u00e9liorer les algorithmes existants, de s'interfacer avec des syst\u00e8mes commerciaux, de mesurer les performances de reconnaissance et de d\u00e9ployer des syst\u00e8mes biom\u00e9triques automatis\u00e9s. Le projet est con\u00e7u pour faciliter le prototypage rapide d'algorithmes, et dispose d'un cadre de base mature, d'un syst\u00e8me de plug-in flexible et d'un support pour le d\u00e9veloppement de sources ouvertes et ferm\u00e9es. Des algorithmes pr\u00eats \u00e0 l'emploi sont \u00e9galement disponibles pour des modalit\u00e9s sp\u00e9cifiques, notamment la reconnaissance faciale, l\u2019estimation de l'\u00e2ge et l'estimation du genre. Les cr\u00e9ateurs sont J. Klontz, B. Klare, S. Klum, M. Burge, A. Jain.",
            "title": "Open Br"
        },
        {
            "location": "/openbr/#installation",
            "text": "OpenBR est pris en charge sur plusieurs syst\u00e8mes d'exploitation.\nNotamment:   Linux  Mac Os X  Windows   Cepedant nous avons pr\u00e9par\u00e9 une  machine virtuelle linux  d\u00e9j\u00e0 pr\u00eate \u00e0 l'emploi.  Disponible ici .",
            "title": "installation"
        },
        {
            "location": "/openbr/#installation-linux",
            "text": "Installer GCC 4.9.2  $ sudo apt-get update\n$ sudo apt-get install build-essential    Installer CMake 3.0.2  $ sudo apt-get install cmake cmake-curses-gui    T\u00e9l\u00e9charger OpenCV 2.4.11 ,  Aussi   Faire un build OpenCV avec support vid\u00e9o  $ cd ~/Downloads\n$ unzip opencv-2.4.11.zip\n$ cd opencv-2.4.11\n$ mkdir build\n$ cd build\n$ cmake -DCMAKE_BUILD_TYPE=Release ..\n$ make -j4\n$ sudo make install\n$ cd ../..\n$ rm -rf opencv-2.4.11*    Installer Qt 5.4.1  $ sudo apt-get install qt5-default libqt5svg5-dev qtcreator    Avec un compte  GitHub    $ git clone https://github.com/biometrics/openbr.git\n$ cd openbr\n$ git checkout v1.1.0\n$ git submodule init\n$ git submodule update    Build OpenBR!  $ mkdir build # from the OpenBR root directory\n$ cd build\n$ cmake -DCMAKE_BUILD_TYPE=Release ..\n$ make -j4\n$ sudo make install    Hack OpenBR!    Open Qt Creator IDE  $ qtcreator &    From the Qt Creator \"File\" menu select \"Open File or Project...\".   Select \"openbr/CMakeLists.txt\" then \"Open\".  Browse to your pre-existing build directory \"openbr/build\" then select \"Next\".  Select \"Run CMake\" then \"Finish\".  You're all set! You can find more information on Qt Creator  here  if you need it.     (Optionel) Tester OpenBR (un peu lourd)!  $ cd openbr/scripts\n$ ./downloadDatasets.sh\n$ cd ../build\n$ make test    (Optionel) Package OpenBR!  $ cd openbr/build\n$ sudo cpack -G TGZ    (Optionel) Build OpenBR documentation!    G\u00e9n\u00e9rer la documentation  $ pip install mkdocs\n$ cd openbr/docs\n$ sh build_docs.sh\n$ mkdocs serve    Taper  http://127.0.0.1:8000  dans votre ordinateur pour voir la docs.",
            "title": "Installation Linux"
        },
        {
            "location": "/openbr/#osx",
            "text": "1.T\u00e9l\u00e9chargez et installez les derniers outils \u00abXCode\u00bb et \u00abCommand Line Tools\u00bb sur [la page T\u00e9l\u00e9chargements de d\u00e9veloppeurs Apple].(https://developer.apple.com/downloads/index.action#) page.    T\u00e9l\u00e9charger CMake 3.0.2      $ cd ~/Downloads\n    $ tar -xf cmake-3.0.2.tar.gz\n    $ cd cmake-3.0.2\n    $ ./configure\n    $ make -j4\n    $ sudo make install\n    $ cd ..\n    $ rm -rf cmake-3.0.2*    T\u00e9l\u00e9charger OpenCV 2.4.11  $ cd ~/Downloads\n$ unzip opencv-2.4.11.zip\n$ cd opencv-2.4.11\n$ mkdir build\n$ cd build\n$ cmake -DCMAKE_BUILD_TYPE=Release ..\n$ make -j4\n$ sudo make install\n$ cd ../..\n$ rm -rf opencv-2.4.11*    T\u00e9l\u00e9charger et installler Qt 5.4.1    Avec un compte  GitHub  $ git clone https://github.com/biometrics/openbr.git\n$ cd openbr\n$ git checkout v1.1.0\n$ git submodule init\n$ git submodule update    Build OpenBR!  $ mkdir build # from the OpenBR root directory\n$ cd build\n$ cmake -DCMAKE_PREFIX_PATH=~/Qt/5.4.1/clang_64 -DCMAKE_BUILD_TYPE=Release ..\n$ make -j4\n$ sudo make install    Hack OpenBR!    Open Qt Creator IDE  $ open ~/Qt/Qt\\ Creator.app    From the Qt Creator \"File\" menu select \"Open File or Project...\".   Select \"openbr/CMakeLists.txt\" then \"Open\".  Browse to your pre-existing build directory \"openbr/build\" then select \"Continue\".  Select \"Run CMake\" then \"Done\".  You're all set! You can find more information on Qt Creator  here  if you need it.     (Optionel) Tester OpenBR (un peu lourd)!  $ cd openbr/scripts\n$ ./downloadDatasets.sh\n$ cd ../build\n$ make test    (Optional) Package OpenBR!  $ cd openbr/build\n$ sudo cpack -G TGZ    (Optional) Build OpenBR documentation!    G\u00e9n\u00e9rer la doc  $ pip install mkdocs\n$ cd openbr/docs\n$ sh build_docs.sh\n$ mkdocs serve    Taper  http://127.0.0.1:8000  dans votre ordinateur pour voir la docs.",
            "title": "OSX"
        },
        {
            "location": "/openbr/#windows",
            "text": "T\u00e9l\u00e9chargez Visual Studio Express 2013 pour Windows Desktop  et installez-le. Vous devrez vous enregistrer aupr\u00e8s de Microsoft, mais c'est gratuit.e.    T\u00e9l\u00e9charger et installer CMake 3.0.2 \n\u00a0\u00a0\u00a0\u00a0 1. Pendant la configuration de l'installation, s\u00e9lectionnez \"Ajouter CMake \u00e0 PATH\".    T\u00e9l\u00e9charger OpenCV 2.4.11 \n\u00a0\u00a0\u00a0\u00a0 1. Consid\u00e9rez le programme open source gratuit  7-Zip  si vous avez besoin d'un programme pour d\u00e9sarchiver les archives.\n\u00a0\u00a0\u00a0\u00a0 2. D\u00e9placez le dossier \"opencv-2.4.11\" sur \"C: \\\".   Ouvrir  \"l'invite de commande VS2013 x64 Cross Tools \"  (dans le menu D\u00e9marrer, s\u00e9lectionnez \u00abTous les programmes\u00bb -> \u00abMicrosoft Visual Studio 2013\u00bb -> \u00abOutils Visual Studio\u00bb -> \u00abInvite de commandes VS2013 x64 Cross Tools\u00bb) :\n        $ cd C:\\opencv-2.4.11\n        $ mkdir build-msvc2013\n        $ cd build-msvc2013\n        $ cmake -G \"NMake Makefiles\" -DBUILD_PERF_TESTS=OFF -DBUILD_TESTS=OFF -DWITH_CUDA=OFF -DWITH_FFMPEG=OFF -DCMAKE_BUILD_TYPE=Debug ..\n        $ nmake\n        $ nmake install\n        $ cmake -DCMAKE_BUILD_TYPE=Release ..\n        $ nmake\n        $ nmake install\n        $ nmake clean     T\u00e9l\u00e9charger et Installer Qt 5.4.1    Avec un compte  GitHub        $ cd /c\n    $ git clone https://github.com/biometrics/openbr.git\n    $ cd openbr\n    $ git checkout v1.1.0\n    $ git submodule init\n    $ git submodule update    Build OpenBR!   From the VS2013 x64 Cross Tools Command Prompt: $ cd C:\\openbr\n$ mkdir build-msvc2013\n$ cd build-msvc2013\n$ cmake -G \"CodeBlocks - NMake Makefiles\" -DCMAKE_PREFIX_PATH=\"C:/opencv-2.4.11/build/install;C:/Qt/Qt5.4.1/5.4/msvc2013_64\" -DCMAKE_INSTALL_PREFIX=\"./install\" -DBR_INSTALL_DEPENDENCIES=ON -DCMAKE_BUILD_TYPE=Release ..\n$ nmake\n$ nmake install      D\u00e9couvrez le dossier \"install\".    Hack OpenBR!   From the VS2013 x64 Cross Tools Command Prompt:\n    $ C:\\Qt\\Qt5.4.1\\Tools\\QtCreator\\bin\\qtcreator.exe  From the Qt Creator \"Tools\" menu select \"Options...\"  Under \"Kits\" select \"Desktop (default)\"  For \"Compiler:\" select \"Microsoft Visual C++ Compiler 11.0 (x86_amd64)\" and click \"OK\"  From the Qt Creator \"File\" menu select \"Open File or Project...\".  Select \"C:\\openbr\\CMakeLists.txt\" then \"Open\".  If prompted for the location of CMake, enter \"C:\\Program Files (x86)\\CMake 3.0.2\\bin\\cmake.exe\".  Browse to your pre-existing build directory \"C:\\openbr\\build-msvc2013\" then select \"Next\".  Select \"Run CMake\" then \"Finish\".  You're all set! You can find more information on Qt Creator  here  if you need.     (Optional) Package OpenBR!   From the VS2013 x64 Cross Tools Command Prompt:\n    $ cd C:\\openbr\\build-msvc2013\n    $ cpack -G ZIP",
            "title": "Windows"
        },
        {
            "location": "/openbr/#face-recognition",
            "text": "Ce tutoriel donne un exemple sur la fa\u00e7on d'effectuer une reconnaissance de visage dans OpenBR. OpenBR impl\u00e9mente l'algorithme 4SF  ^2  pour effectuer la reconnaissance faciale. Veuillez lire le \"paper\" pour plus de d\u00e9tails sur l'algorithme.   Pour commencer, On peut faire la reconnaissance faciale \u00e0 partir de l'invite de commande. Ouvrez le terminal et entrez:  $ br -algorithm FaceRecognition \\\n    -compare ../data/MEDS/img/S354-01-t10_01.jpg ../data/MEDS/img/S354-02-t10_01.jpg \\\n     -compare ../data/MEDS/img/S354-01-t10_01.jpg ../data/MEDS/img/S386-04-t10_01.jpg  Assez facile? Vous devriez voir les r\u00e9sultats sur le terminal qui ressemblent \u00e0 :  $ Set algorithm to FaceRecognition\n$ Loading /usr/local/share/openbr/models/algorithms/FaceRecognition\n$ Loading /usr/local/share/openbr/models/transforms//FaceRecognitionExtraction\n$ Loading /usr/local/share/openbr/models/transforms//FaceRecognitionEmbedding\n$ Loading /usr/local/share/openbr/models/transforms//FaceRecognitionQuantization\n$ Comparing ../data/MEDS/img/S354-01-t10_01.jpg and ../data/MEDS/img/S354-02-t10_01.jpg\n$ Enrolling ../data/MEDS/img/S354-01-t10_01.jpg to S354-01-t10_01r7Rv4W.mem\n$ 100.00%  ELAPSED=00:00:00  REMAINING=00:00:00  COUNT=1\n$ 100.00%  ELAPSED=00:00:00  REMAINING=00:00:00  COUNT=1\n$ 1.8812\n$ Comparing ../data/MEDS/img/S354-01-t10_01.jpg and ../data/MEDS/img/S386-04-t10_01.jpg\n$ Enrolling ../data/MEDS/img/S354-01-t10_01.jpg to S354-01-t10_01r7Rv4W.mem\n$ 100.00%  ELAPSED=00:00:00  REMAINING=00:00:00  COUNT=1\n$ 100.00%  ELAPSED=00:00:00  REMAINING=00:00:00  COUNT=1\n$ 0.571219  Alors, qu'est-ce que  FaceRecognition ? C'est une abbrieviation pour simplifier l'ex\u00e9cution de l'algorithme. Toutes les abr\u00e9viations d'algorithmes se trouvent dans  openbr / plugins / core / algorithms.cpp .  Il est \u00e9galement possible:   \u00c9valuer les performances de reconnaissance de faciale (Notez que cela n\u00e9cessite  R ):           $ br -algorithm FaceRecognition -path ../data/MEDS/img/ \\\n        -enroll ../data/MEDS/sigset/MEDS_frontal_target.xml target.gal \\\n        -enroll ../data/MEDS/sigset/MEDS_frontal_query.xml query.gal \\\n        -compare target.gal query.gal scores.mtx \\\n        -makeMask ../data/MEDS/sigset/MEDS_frontal_target.xml ../data/MEDS/sigset/MEDS_frontal_query.xml MEDS.mask \\\n        -eval scores.mtx MEDS.mask Algorithm_Dataset/FaceRecognition_MEDS.csv \\\n        -plot Algorithm_Dataset/FaceRecognition_MEDS.csv MEDS    Effectuez une recherche de reconnaissance faciale 1:N.  $ br -algorithm FaceRecognition -enrollAll -enroll ../data/MEDS/img 'meds.gal'\n$ br -algorithm FaceRecognition -compare meds.gal ../data/MEDS/img/S001-01-t10_01.jpg match_scores.csv    Entrainer un nouvel algorithme de reconnaissance faciale (sur une autre base):  $ br -algorithm 'Open+Cvt(Gray)+Cascade(FrontalFace)+ASEFEyes+Affine(128,128,0.33,0.45)+(Grid(10,10)+SIFTDescriptor(12)+ByRow)/(Blur(1.1)+Gamma(0.2)+DoG(1,2)+ContrastEq(0.1,10)+LBP(1,2)+RectRegions(8,8,6,6)+Hist(59))+PCA(0.95)+Normalize(L2)+Dup(12)+RndSubspace(0.05,1)+LDA(0.98)+Cat+PCA(0.95)+Normalize(L1)+Quantize:NegativeLogPlusOne(ByteL1)' -train ../data/ATT/img FaceRecognitionATT    L'API de ligne de commande est document\u00e9e  ici .",
            "title": "Face Recognition"
        },
        {
            "location": "/openface/",
            "text": "Openface of project-21\n\n\nLa m\u00e9thode Open Face est une m\u00e9thode de reconnaissance faciale open source d\u00e9velopp\u00e9e par Brandon Amos Bartosz Ludwiczuk, et Mahadev Satyanarayanan. Elle est bas\u00e9e sur le document FaceNet de CVR 2015 :\nA Unifed Embedding for Face Recogniton and Clustering publi\u00e9 par les 3 ing\u00e9nieurs de google Florian Schrof, Dmitry Kalenichenko, and James Philbin\n. La m\u00e9thode est impl\u00e9ment\u00e9e en Python et Torch don peut \u00eatre impl\u00e9ment\u00e9e sur CPU ou GPU.\n\n\nCeci est un guide pour vous aider \u00e0 utiliser \nOpenface\n sur votre propre ordinateur.\n\u00a0\n\n\nEnvironnement\n\n\nLes instructions suivantes sont pour \nLinux\n et\nOSX\n seulement.\n\n\n\n\nNous vous recommandons fortement d'utiliser le conteneur \nDocker\n sauf si vous \u00eates exp\u00e9riment\u00e9 dans la cr\u00e9ation de logiciels Linux \u00e0 partir de sources.\n\n\nDans OSX, vous devrez peut-\u00eatre changer les hashbangs de \npython2\n \u00e0\npython\n.\n\n\nOpenFace\n a \u00e9t\u00e9 test\u00e9 sur \nUbuntu\n 14.04 et \nOSX\n 10.10 et peut ne pas fonctionner correctement sur d'autres distributions.\nPlus d'informations concernant l'installation sur \nle site de open face\n.\n\n\n\n\nDocker automatis\u00e9\n\n\nLe moyen le plus rapide de commencer est d'utiliser notre build Docker automatis\u00e9 pr\u00e9construit, disponible sur \nbamos / openface\n. Cela ne n\u00e9cessite pas ou n'utilise pas une copie locale d'OpenFace. Pour utiliser sur vos images, partagez un r\u00e9pertoire entre votre h\u00f4te et le conteneur Docker.\n\n\n\n\nIci \nlocal_directory\n est le r\u00e9pertoire qui est en dehors de\nDocker container\n, o\u00f9 vous devriez placer vos images de traing. (Par exemple: / User / training-images)\n\n\nEt \nremote_directory\n est le r\u00e9pertoire qui se trouve dans\nDocker container\n qui a le m\u00eame contenu que \nlocal_directory\n\n\n\n\n$ docker pull bamos/openface\n$ docker run -p 9000:9000 -p 8000:8000 -v /local_directory:/remote_directory -t -i bamos/openface /bin/bash\n\n\n\n\nCr\u00e9ation d'un mod\u00e8le de classification\n\n\n1. Cr\u00e9ez un r\u00e9pertoire d'images brutes.\n\n\nPr\u00e9parer \n30\n images, ils doivent \u00eatre\n2\n personnes diff\u00e9rentes, la taille de l'image n'a pas d'importance, mais il est pr\u00e9f\u00e9rable d'inclure seulement des visages, \n15\n images pour chaque personne, respectivement plac\u00e9s dans deux r\u00e9pertoires diff\u00e9rents.\n\n\n$ ./local_directory/traing-images\n\n\n\n\nStructure:\n\npersonne-1\n\u251c\u2500\u2500 image image-1.jpg\n\u251c\u2500\u2500 image image-2.png\n...\n\u2514\u2500\u2500 image image-15.png\n\npersonne-2\n\u251c\u2500\u2500 image image-1.png\n\u251c\u2500\u2500 image image-2.jpg\n...\n\u2514\u2500\u2500 image image-15.png\n\n\n\n\n2. D\u00e9tection de visage\n\n\nD\u00e9marrer la d\u00e9tection automatique\n\n\n$ /root/openface/util/align-dlib.py ./training-images align outerEyesAndNose ./aligned-images/ --size 96\n\n\n\n\nLe but de cette \u00e9tape est de permettre \u00e0 la machine de d\u00e9couper automatiquement ces 30 photos en fichiers png \n96x96\n pour un traitement ult\u00e9rieur.\n\n\nLe r\u00e9sultat du traitement est plac\u00e9 dans le r\u00e9pertoire \naligned-images\n. Il y a deux dossiers en dessous, c'est-\u00e0-dire les noms des deux personnes que vous avez plac\u00e9es, et ces deux dossiers incluent les visages des deux personnes.\n\n\n3. G\u00e9n\u00e9rer des repr\u00e9sentations\n\n\n$ /root/openface/batch-represent/main.lua -outDir ./generated-embeddings/ -data ./aligned-images/\n\n\n\n\nIl produit le mod\u00e8le de classification qui est un SVM enregistr\u00e9 sur le disque en tant que pickle Python. Cette \u00e9tape va g\u00e9n\u00e9rer 2 fichiers csv dans le r\u00e9pertoire \ngenerated-embeddings\n. Les labels \nlabels.csv\n et \nreps.csv\n,\nlabels.csv\n sont relativement simples, ils montrent juste quelle photo correspond \u00e0 quelle personne, et \nreps.csv\n est un grand nombre de matrices.\n\n\n4. Cr\u00e9ez le mode de classification\n\n\n$ /root/openface/demos/classifier.py train ./generated-embeddings\n\n\n\n\nLe r\u00e9sultat de l'apprentissage g\u00e9n\u00e9rera un fichier \nclassifier.pkl\n dans le r\u00e9pertoire\ngenerated-embeddings\n. C'est ce que nous voulons finalement.\n\n\nReconnaissance de visage\n\n\nVous pouvez maintenant commencer \u00e0 tester et copier une image dans \n/ local_directory\n qui ne se trouve pas dans l'ensemble de donn\u00e9es. Cette photo peut inclure le fond ou le corps entier, mais il est pr\u00e9f\u00e9rable de ne pas mettre une photo de plusieurs personnes, ou la machine ne sait pas laquelle vous voulez identifier.\n\n\nEn supposant que le fichier photo est \nlocal_directory / 1.jpg\n\n\n$ /root/openface/demos/classifier.py infer ./generated-embeddings/classifier.pkl 1.jpg\n\n\n\n\nSi la personne sur la photo est l'une des deux personnes identifi\u00e9es tout \u00e0 l'heure, la pr\u00e9cision de la reconnaissance sera sup\u00e9rieure \u00e0 90%. Sinon, ce sera moins de 80%.\n\n\nEn plus\n\n\nLien du docker utilis\u00e9 pour le projet 21 disponible \nici",
            "title": "Open Face"
        },
        {
            "location": "/openface/#openface-of-project-21",
            "text": "La m\u00e9thode Open Face est une m\u00e9thode de reconnaissance faciale open source d\u00e9velopp\u00e9e par Brandon Amos Bartosz Ludwiczuk, et Mahadev Satyanarayanan. Elle est bas\u00e9e sur le document FaceNet de CVR 2015 : A Unifed Embedding for Face Recogniton and Clustering publi\u00e9 par les 3 ing\u00e9nieurs de google Florian Schrof, Dmitry Kalenichenko, and James Philbin . La m\u00e9thode est impl\u00e9ment\u00e9e en Python et Torch don peut \u00eatre impl\u00e9ment\u00e9e sur CPU ou GPU.  Ceci est un guide pour vous aider \u00e0 utiliser  Openface  sur votre propre ordinateur.",
            "title": "Openface of project-21"
        },
        {
            "location": "/openface/#environnement",
            "text": "Les instructions suivantes sont pour  Linux  et OSX  seulement.   Nous vous recommandons fortement d'utiliser le conteneur  Docker  sauf si vous \u00eates exp\u00e9riment\u00e9 dans la cr\u00e9ation de logiciels Linux \u00e0 partir de sources.  Dans OSX, vous devrez peut-\u00eatre changer les hashbangs de  python2  \u00e0 python .  OpenFace  a \u00e9t\u00e9 test\u00e9 sur  Ubuntu  14.04 et  OSX  10.10 et peut ne pas fonctionner correctement sur d'autres distributions.\nPlus d'informations concernant l'installation sur  le site de open face .",
            "title": "Environnement"
        },
        {
            "location": "/openface/#docker-automatise",
            "text": "Le moyen le plus rapide de commencer est d'utiliser notre build Docker automatis\u00e9 pr\u00e9construit, disponible sur  bamos / openface . Cela ne n\u00e9cessite pas ou n'utilise pas une copie locale d'OpenFace. Pour utiliser sur vos images, partagez un r\u00e9pertoire entre votre h\u00f4te et le conteneur Docker.   Ici  local_directory  est le r\u00e9pertoire qui est en dehors de Docker container , o\u00f9 vous devriez placer vos images de traing. (Par exemple: / User / training-images)  Et  remote_directory  est le r\u00e9pertoire qui se trouve dans Docker container  qui a le m\u00eame contenu que  local_directory   $ docker pull bamos/openface\n$ docker run -p 9000:9000 -p 8000:8000 -v /local_directory:/remote_directory -t -i bamos/openface /bin/bash",
            "title": "Docker automatis\u00e9"
        },
        {
            "location": "/openface/#creation-dun-modele-de-classification",
            "text": "",
            "title": "Cr\u00e9ation d'un mod\u00e8le de classification"
        },
        {
            "location": "/openface/#1-creez-un-repertoire-dimages-brutes",
            "text": "Pr\u00e9parer  30  images, ils doivent \u00eatre 2  personnes diff\u00e9rentes, la taille de l'image n'a pas d'importance, mais il est pr\u00e9f\u00e9rable d'inclure seulement des visages,  15  images pour chaque personne, respectivement plac\u00e9s dans deux r\u00e9pertoires diff\u00e9rents.  $ ./local_directory/traing-images  Structure:\n\npersonne-1\n\u251c\u2500\u2500 image image-1.jpg\n\u251c\u2500\u2500 image image-2.png\n...\n\u2514\u2500\u2500 image image-15.png\n\npersonne-2\n\u251c\u2500\u2500 image image-1.png\n\u251c\u2500\u2500 image image-2.jpg\n...\n\u2514\u2500\u2500 image image-15.png",
            "title": "1. Cr\u00e9ez un r\u00e9pertoire d'images brutes."
        },
        {
            "location": "/openface/#2-detection-de-visage",
            "text": "D\u00e9marrer la d\u00e9tection automatique  $ /root/openface/util/align-dlib.py ./training-images align outerEyesAndNose ./aligned-images/ --size 96  Le but de cette \u00e9tape est de permettre \u00e0 la machine de d\u00e9couper automatiquement ces 30 photos en fichiers png  96x96  pour un traitement ult\u00e9rieur.  Le r\u00e9sultat du traitement est plac\u00e9 dans le r\u00e9pertoire  aligned-images . Il y a deux dossiers en dessous, c'est-\u00e0-dire les noms des deux personnes que vous avez plac\u00e9es, et ces deux dossiers incluent les visages des deux personnes.",
            "title": "2. D\u00e9tection de visage"
        },
        {
            "location": "/openface/#3-generer-des-representations",
            "text": "$ /root/openface/batch-represent/main.lua -outDir ./generated-embeddings/ -data ./aligned-images/  Il produit le mod\u00e8le de classification qui est un SVM enregistr\u00e9 sur le disque en tant que pickle Python. Cette \u00e9tape va g\u00e9n\u00e9rer 2 fichiers csv dans le r\u00e9pertoire  generated-embeddings . Les labels  labels.csv  et  reps.csv , labels.csv  sont relativement simples, ils montrent juste quelle photo correspond \u00e0 quelle personne, et  reps.csv  est un grand nombre de matrices.",
            "title": "3. G\u00e9n\u00e9rer des repr\u00e9sentations"
        },
        {
            "location": "/openface/#4-creez-le-mode-de-classification",
            "text": "$ /root/openface/demos/classifier.py train ./generated-embeddings  Le r\u00e9sultat de l'apprentissage g\u00e9n\u00e9rera un fichier  classifier.pkl  dans le r\u00e9pertoire generated-embeddings . C'est ce que nous voulons finalement.",
            "title": "4. Cr\u00e9ez le mode de classification"
        },
        {
            "location": "/openface/#reconnaissance-de-visage",
            "text": "Vous pouvez maintenant commencer \u00e0 tester et copier une image dans  / local_directory  qui ne se trouve pas dans l'ensemble de donn\u00e9es. Cette photo peut inclure le fond ou le corps entier, mais il est pr\u00e9f\u00e9rable de ne pas mettre une photo de plusieurs personnes, ou la machine ne sait pas laquelle vous voulez identifier.  En supposant que le fichier photo est  local_directory / 1.jpg  $ /root/openface/demos/classifier.py infer ./generated-embeddings/classifier.pkl 1.jpg  Si la personne sur la photo est l'une des deux personnes identifi\u00e9es tout \u00e0 l'heure, la pr\u00e9cision de la reconnaissance sera sup\u00e9rieure \u00e0 90%. Sinon, ce sera moins de 80%.",
            "title": "Reconnaissance de visage"
        },
        {
            "location": "/openface/#en-plus",
            "text": "Lien du docker utilis\u00e9 pour le projet 21 disponible  ici",
            "title": "En plus"
        },
        {
            "location": "/testprotocol/detection/",
            "text": "D\u00e9tection\n\n\nLes informations sont pr\u00e9sentes dans le code voir notre code GitHub \nici\n.",
            "title": "D\u00e9tection"
        },
        {
            "location": "/testprotocol/detection/#detection",
            "text": "Les informations sont pr\u00e9sentes dans le code voir notre code GitHub  ici .",
            "title": "D\u00e9tection"
        },
        {
            "location": "/testprotocol/reconnaissance/",
            "text": "Face Recognition\n\n\nFace recognition\n est une m\u00e9thode utilisant le Deep Learning qui pr\u00e9sente une bonne solution pour la r\u00e9solution du probl\u00e8me de la reconnaissance de personne. Cette m\u00e9thode commence d\u2019abord par d\u00e9tecter tous les visages pr\u00e9sents dans l\u2019image fournie en entr\u00e9e. Ensuite, sur chaque visage applique les op\u00e9rations n\u00e9cessaires sur chaque visage tel que la rotation afin d\u2019obtenir une vue de profil. La prochaine \u00e9tape consiste \u00e0 transformer cette image en 128 caract\u00e9ristiques qui sont propres \u00e0 la personne de fa\u00e7on quand une m\u00eame personne est pr\u00e9sente sur 2 images diff\u00e9rentes aura les m\u00eames ou de tr\u00e8s proche ensemble de caract\u00e9ristiques. La derni\u00e8re \u00e9tape consiste \u00e0 comparer ces donn\u00e9es-ci aux donn\u00e9es d\u00e9j\u00e0 existant dans la base d\u2019apprentissage afin identifier et de d\u00e9terminer le nom de la personne.\n\n\nConstruit en utilisant \ndlib\n Face recognition est \u00e0 la fine pointe de la technologie\nconstruit avec un apprentissage profond. Le mod\u00e8le a une pr\u00e9cision de 99,38% sur le\n\nLabeled Faces in the Wild\n.\n\n\nInstallation\n\n\nExigences\n\n\n\n\nPython 3.3+ ou Python 2.7\n\n\nmacOS ou Linux (Windows n'est pas officiellement support\u00e9, mais pourrait fonctionner)\n\n\n\n\nOptions d'installation:\n\n\nInstallation sur Mac ou Linux\n\n\nTout d'abord, assurez-vous que dlib est d\u00e9j\u00e0 install\u00e9 avec les d\u00e9pendances Python:\n\n\npip3 installer dlib\n\n\n\n\nAfin d'installer correctement dlib, vous devrez peut-\u00eatre installer \ncmake\n\n\nEnsuite, installez ce module \u00e0 partir de pypi en utilisant \npip3\n (ou\npip2\n pour Python 2):\n\n\npip3 installer face_recognition\n\n\n\n\nSi vous rencontrez des probl\u00e8mes avec l'installation, vous pouvez \u00e9galement essayer\n\nVM pr\u00e9configur\u00e9e\n.\n\n\nInstallation sur Raspberry Pi 2+\n\n\n\n\nInstructions d'installation de Raspberry Pi 2+\n\n\n\n\nInstallation sous Windows\n\n\nBien que Windows ne soit pas officiellement pris en charge, il existe des m\u00e9thodes pour le faire\n\n\n\n\nGuide d'installation de Windows 10 de @ masoudr \ndlib + face_recognition\n.\n\n\n\n\nInstallation d'une image de machine virtuelle pr\u00e9configur\u00e9e\n\n\n\n\nT\u00e9l\u00e9charger l'image VM pr\u00e9configur\u00e9e\n (pour VMware Player ou VirtualBox).\n\n\n\n\nUtilisation\n\n\nL'entrainement du classificateur KNN\n\n\nAfin de pouvoir reconna\u00eetre les visages, nous devons cr\u00e9er un classificateur et le sauvegarder \u00e0 l'avance.\n\n\nCr\u00e9er un dossier d'ensemble d'apprentissage\n\n\nStructure:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<train_dir> /\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u251c\u2500\u2500 <personne1> /\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Som \u251c\u2500\u2500 <nom de famille> .jpeg\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502 \u251c\u2500\u2500 <nomdufichier2> .jpeg\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502 \u251c\u2500\u2500 ...\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u251c\u2500\u2500 <personne2> /\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Som \u251c\u2500\u2500 <nom de famille> .jpeg\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502 \u2514\u2500\u2500 <nomdufichier2> .jpeg\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2514\u2500\u2500 ...\n\n\n\n\nEntrainer et enregistrer un classificateur KNN\n\n\nknn_train.py --training-path --clf-saving-path\n\n\n\n\nO\u00f9 \ntraining-path\nest le dossier contenant les images d'apprentissage et\nclf-saving-path\n est le fichier classificateur (au format \n.clf\n).\n\n\nIdentifier les visages en utilisant le classificateur cr\u00e9\u00e9\n\n\nComme le classificateur KNN est bien entrain\u00e9 et enregistr\u00e9, nous n'avons plus besoin de d'entrainer le classificateur chaque fois que nous utilisons le mod\u00e8le. \nCependant si on change de mod\u00e8le on devra refaire l'entrainement, ie si on veut ajouter de nouvelles personnes dans la base d'apprentissage.\n\n\nknn.py --clf-load-path --testing-path\n\n\n\n\nO\u00f9 clf-load-path est le fichier du classificateur et testing-path est le chemin de toute l'image de test.\n\n\nUne fois la reconnaissance termin\u00e9e, un fichier \nresult.txt\n sera cr\u00e9\u00e9, dans lequel la premi\u00e8re colonne est le nom reconnu et la deuxi\u00e8me colonne le nom r\u00e9el du fichier.",
            "title": "Reconnaissance"
        },
        {
            "location": "/testprotocol/reconnaissance/#face-recognition",
            "text": "Face recognition  est une m\u00e9thode utilisant le Deep Learning qui pr\u00e9sente une bonne solution pour la r\u00e9solution du probl\u00e8me de la reconnaissance de personne. Cette m\u00e9thode commence d\u2019abord par d\u00e9tecter tous les visages pr\u00e9sents dans l\u2019image fournie en entr\u00e9e. Ensuite, sur chaque visage applique les op\u00e9rations n\u00e9cessaires sur chaque visage tel que la rotation afin d\u2019obtenir une vue de profil. La prochaine \u00e9tape consiste \u00e0 transformer cette image en 128 caract\u00e9ristiques qui sont propres \u00e0 la personne de fa\u00e7on quand une m\u00eame personne est pr\u00e9sente sur 2 images diff\u00e9rentes aura les m\u00eames ou de tr\u00e8s proche ensemble de caract\u00e9ristiques. La derni\u00e8re \u00e9tape consiste \u00e0 comparer ces donn\u00e9es-ci aux donn\u00e9es d\u00e9j\u00e0 existant dans la base d\u2019apprentissage afin identifier et de d\u00e9terminer le nom de la personne.  Construit en utilisant  dlib  Face recognition est \u00e0 la fine pointe de la technologie\nconstruit avec un apprentissage profond. Le mod\u00e8le a une pr\u00e9cision de 99,38% sur le Labeled Faces in the Wild .",
            "title": "Face Recognition"
        },
        {
            "location": "/testprotocol/reconnaissance/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/testprotocol/reconnaissance/#exigences",
            "text": "Python 3.3+ ou Python 2.7  macOS ou Linux (Windows n'est pas officiellement support\u00e9, mais pourrait fonctionner)",
            "title": "Exigences"
        },
        {
            "location": "/testprotocol/reconnaissance/#options-dinstallation",
            "text": "",
            "title": "Options d'installation:"
        },
        {
            "location": "/testprotocol/reconnaissance/#installation-sur-mac-ou-linux",
            "text": "Tout d'abord, assurez-vous que dlib est d\u00e9j\u00e0 install\u00e9 avec les d\u00e9pendances Python:  pip3 installer dlib  Afin d'installer correctement dlib, vous devrez peut-\u00eatre installer  cmake  Ensuite, installez ce module \u00e0 partir de pypi en utilisant  pip3  (ou pip2  pour Python 2):  pip3 installer face_recognition  Si vous rencontrez des probl\u00e8mes avec l'installation, vous pouvez \u00e9galement essayer VM pr\u00e9configur\u00e9e .",
            "title": "Installation sur Mac ou Linux"
        },
        {
            "location": "/testprotocol/reconnaissance/#installation-sur-raspberry-pi-2",
            "text": "Instructions d'installation de Raspberry Pi 2+",
            "title": "Installation sur Raspberry Pi 2+"
        },
        {
            "location": "/testprotocol/reconnaissance/#installation-sous-windows",
            "text": "Bien que Windows ne soit pas officiellement pris en charge, il existe des m\u00e9thodes pour le faire   Guide d'installation de Windows 10 de @ masoudr  dlib + face_recognition .",
            "title": "Installation sous Windows"
        },
        {
            "location": "/testprotocol/reconnaissance/#installation-dune-image-de-machine-virtuelle-preconfiguree",
            "text": "T\u00e9l\u00e9charger l'image VM pr\u00e9configur\u00e9e  (pour VMware Player ou VirtualBox).",
            "title": "Installation d'une image de machine virtuelle pr\u00e9configur\u00e9e"
        },
        {
            "location": "/testprotocol/reconnaissance/#utilisation",
            "text": "",
            "title": "Utilisation"
        },
        {
            "location": "/testprotocol/reconnaissance/#lentrainement-du-classificateur-knn",
            "text": "Afin de pouvoir reconna\u00eetre les visages, nous devons cr\u00e9er un classificateur et le sauvegarder \u00e0 l'avance.",
            "title": "L'entrainement du classificateur KNN"
        },
        {
            "location": "/testprotocol/reconnaissance/#creer-un-dossier-densemble-dapprentissage",
            "text": "Structure:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<train_dir> /\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u251c\u2500\u2500 <personne1> /\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Som \u251c\u2500\u2500 <nom de famille> .jpeg\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502 \u251c\u2500\u2500 <nomdufichier2> .jpeg\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502 \u251c\u2500\u2500 ...\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u251c\u2500\u2500 <personne2> /\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Som \u251c\u2500\u2500 <nom de famille> .jpeg\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502 \u2514\u2500\u2500 <nomdufichier2> .jpeg\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2514\u2500\u2500 ...",
            "title": "Cr\u00e9er un dossier d'ensemble d'apprentissage"
        },
        {
            "location": "/testprotocol/reconnaissance/#entrainer-et-enregistrer-un-classificateur-knn",
            "text": "knn_train.py --training-path --clf-saving-path  O\u00f9  training-path est le dossier contenant les images d'apprentissage et clf-saving-path  est le fichier classificateur (au format  .clf ).",
            "title": "Entrainer et enregistrer un classificateur KNN"
        },
        {
            "location": "/testprotocol/reconnaissance/#identifier-les-visages-en-utilisant-le-classificateur-cree",
            "text": "Comme le classificateur KNN est bien entrain\u00e9 et enregistr\u00e9, nous n'avons plus besoin de d'entrainer le classificateur chaque fois que nous utilisons le mod\u00e8le. \nCependant si on change de mod\u00e8le on devra refaire l'entrainement, ie si on veut ajouter de nouvelles personnes dans la base d'apprentissage.  knn.py --clf-load-path --testing-path  O\u00f9 clf-load-path est le fichier du classificateur et testing-path est le chemin de toute l'image de test.  Une fois la reconnaissance termin\u00e9e, un fichier  result.txt  sera cr\u00e9\u00e9, dans lequel la premi\u00e8re colonne est le nom reconnu et la deuxi\u00e8me colonne le nom r\u00e9el du fichier.",
            "title": "Identifier les visages en utilisant le classificateur cr\u00e9\u00e9"
        },
        {
            "location": "/tutoriels/",
            "text": "",
            "title": "Tutoriels"
        },
        {
            "location": "/docs/facerecognition/",
            "text": "Documentation enti\u00e8re de Face Recognition\n\n\npour plus d'informations sur le code cliquer \nici\n.",
            "title": "Documentation Face recognition"
        },
        {
            "location": "/docs/facerecognition/#documentation-entiere-de-face-recognition",
            "text": "pour plus d'informations sur le code cliquer  ici .",
            "title": "Documentation enti\u00e8re de Face Recognition"
        },
        {
            "location": "/docs/openface/",
            "text": "Documentation enti\u00e8re de Open Face\n\n\nPour plus d'informations concernant le code voir \nici",
            "title": "Documentation Open Face"
        },
        {
            "location": "/docs/openface/#documentation-entiere-de-open-face",
            "text": "Pour plus d'informations concernant le code voir  ici",
            "title": "Documentation enti\u00e8re de Open Face"
        },
        {
            "location": "/docs/openbr/",
            "text": "Documentation Open Br\n\n\nPour plus d'informations concernant le code \npython\n voir \nici",
            "title": "Documentation  Open Br"
        },
        {
            "location": "/docs/openbr/#documentation-open-br",
            "text": "Pour plus d'informations concernant le code  python  voir  ici",
            "title": "Documentation Open Br"
        },
        {
            "location": "/about/license/",
            "text": "GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n\nCopyright (C) 2007 Free Software Foundation, Inc. \nhttp://fsf.org/\n\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n                        Preamble\n\n\n\nThe GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n\nThe licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n\nWhen we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n\nTo protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n\nFor example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n\nDevelopers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n\nFor the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n\nSome devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n\nFinally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n\nThe precise terms and conditions for copying, distribution and\nmodification follow.\n\n\n                   TERMS AND CONDITIONS\n\n\n\n\n\nDefinitions.\n\n\n\n\n\"This License\" refers to version 3 of the GNU General Public License.\n\n\n\"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n\n\"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n\nTo \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n\nA \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n\nTo \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n\nTo \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n\nAn interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n\n\n\nSource Code.\n\n\n\n\nThe \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n\nA \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n\nThe \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n\nThe \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n\nThe Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n\nThe Corresponding Source for a work in source code form is that\nsame work.\n\n\n\n\nBasic Permissions.\n\n\n\n\nAll rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n\nYou may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n\nConveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n\n\n\nProtecting Users' Legal Rights From Anti-Circumvention Law.\n\n\n\n\nNo covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n\nWhen you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n\n\n\nConveying Verbatim Copies.\n\n\n\n\nYou may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n\nYou may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n\n\n\nConveying Modified Source Versions.\n\n\n\n\nYou may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n\na) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.\n\n\n\nA compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n\n\n\nConveying Non-Source Forms.\n\n\n\n\nYou may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n\na) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.\n\n\n\nA separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n\nA \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n\n\"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n\nIf you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n\nThe requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n\nCorresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n\n\n\nAdditional Terms.\n\n\n\n\n\"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n\nWhen you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n\nNotwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n\na) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.\n\n\n\nAll other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n\nIf you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n\nAdditional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n\n\n\nTermination.\n\n\n\n\nYou may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n\nHowever, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n\nMoreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n\nTermination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n\n\n\nAcceptance Not Required for Having Copies.\n\n\n\n\nYou are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n\n\n\nAutomatic Licensing of Downstream Recipients.\n\n\n\n\nEach time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n\nAn \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n\nYou may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n\n\n\nPatents.\n\n\n\n\nA \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n\nA contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n\nEach contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n\nIn the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n\nIf you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n\nIf, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n\nA patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n\nNothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n\n\n\nNo Surrender of Others' Freedom.\n\n\n\n\nIf conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n\n\n\nUse with the GNU Affero General Public License.\n\n\n\n\nNotwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n\n\n\nRevised Versions of this License.\n\n\n\n\nThe Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n\nEach version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n\nIf the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n\nLater license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n\n\n\nDisclaimer of Warranty.\n\n\n\n\nTHERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n\n\n\nLimitation of Liability.\n\n\n\n\nIN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n\n\n\nInterpretation of Sections 15 and 16.\n\n\n\n\nIf the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n\n                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs\n\n\n\nIf you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n\nTo do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\n\nAlso add information on how to contact you by electronic and paper mail.\n\n\nIf the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n\n<program>  Copyright (C) <year>  <name of author>\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n\n\n\nThe hypothetical commands \nshow w' and\nshow c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n\nYou should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n\nhttp://www.gnu.org/licenses/\n.\n\n\nThe GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n\nhttp://www.gnu.org/philosophy/why-not-lgpl.html\n.",
            "title": "Licence"
        }
    ]
}